name: Build SnowFox

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clean previous build artifacts (Linux)
        run: |
          rm -rf build
          mkdir build

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ make cmake

      - name: Read version and description from file
        id: read_release_info
        run: |
          RELEASE_INFO=$(cat release_info.txt)
          echo "::set-output name=version::$(echo "$RELEASE_INFO" | grep '^VERSION=' | sed 's/VERSION=//')"
          echo "::set-output name=description::$(echo "$RELEASE_INFO" | grep '^DESCRIPTION=' | sed 's/DESCRIPTION=//')"

      - name: Build snowfox for Linux
        run: |
          cd build
          cmake ../src -DCMAKE_CXX_STANDARD=20
          make snowfox
          mv snowfox snowfox-linux-${{ steps.read_release_info.outputs.version }}

      - name: Create GitHub Release with binary attachment
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          tag_name: v${{ steps.read_release_info.outputs.version }}
          release_name: Release v${{ steps.read_release_info.outputs.version }}
          body: |
            ${{ steps.read_release_info.outputs.description }}

      - name: Upload snowfox binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/snowfox-linux-${{ steps.read_release_info.outputs.version }}
          asset_name: snowfox-linux-${{ steps.read_release_info.outputs.version }}
          asset_content_type: application/octet-stream
